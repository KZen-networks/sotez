#!/usr/bin/env node

const program = require('commander');
const fs = require('fs');
const path = require('path');
const low = require('lowdb');
const FileSync = require('lowdb/adapters/FileSync');
const { Ed25519Party2, Ed25519Party2Share } = require('../dist/src');
const TezClient = require('../dist/src').default;

const client = new TezClient('https://babylonnet.SmartPy.io');

const P1_ENDPOINT = 'http://localhost:8000';
const party2 = new Ed25519Party2(P1_ENDPOINT);

const MUTEZ_IN_XTZ = 1000000;
const CLIENT_DB_PATH = path.join(__dirname, 'client-db');

function ensureDirSync(dirpath) {
  try {
    fs.mkdirSync(dirpath, { recursive: true });
  } catch (err) {
    if (err.code !== 'EEXIST') throw err;
  }
}

ensureDirSync(CLIENT_DB_PATH);
const adapter = new FileSync(path.join(CLIENT_DB_PATH, 'db.json'));
const db = low(adapter);
db.defaults({ addresses: [] }).write();

async function delegate(from, to) {
  const p2Share = db.get('addresses').find({ address: from }).value().share;
  if (!p2Share) {
    console.error('Didn\'t find secret share for the provided from address');
    return;
  }
  await client.importEd25519Party2(
    new Ed25519Party2(P1_ENDPOINT),
    new Ed25519Party2Share(p2Share.key_pair, p2Share.agg_pub_key, p2Share.id),
  );

  const { hash } = await client.setDelegate({
    delegate: to,
    source: from,
  });
  console.log(`Injected delegate operation hash: ${hash}`);

  // Await confirmation of included operation
  const transferBlock = await client.awaitOperation(hash);
  console.log(`Operation found in block ${transferBlock}`);
}

program
  .command('address')
  .action(async () => {
    await client.importEd25519Party2(party2);
    const address = client.party2.publicKeyHash();
    db.get('addresses').push({ address, share: client.party2.secretShare() }).write();
    console.log(client.party2.publicKeyHash());
  });

program
  .command('balance <address>')
  .action(async (address) => {
    const balance = await client.getBalance(address);
    console.log(`${balance / MUTEZ_IN_XTZ} XTZ`);
  });

program
  .command('transfer <from> <to> <xtz_amount>')
  .action(async (from, to, xtz_amount) => {
    const p2Share = db.get('addresses').find({ address: from }).value().share;
    if (!p2Share) {
      console.error('Didn\'t find secret share for the provided from address');
      return;
    }
    await client.importEd25519Party2(
      new Ed25519Party2(P1_ENDPOINT),
      new Ed25519Party2Share(p2Share.key_pair, p2Share.agg_pub_key, p2Share.id),
    );
    const amount = parseFloat(xtz_amount) * MUTEZ_IN_XTZ;
    const { hash } = await client.transfer({
      source: from,
      to,
      amount,
    });
    console.log(`Injected transfer operation hash: ${hash}`);

    // Await confirmation of included operation
    const transferBlock = await client.awaitOperation(hash);
    console.log(`Operation found in block ${transferBlock}`);
  });

program
  .command('delegate <from> <to>')
  .action(delegate);

program.parse(process.argv);
